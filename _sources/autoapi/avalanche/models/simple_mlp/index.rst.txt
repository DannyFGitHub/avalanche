:mod:`avalanche.models.simple_mlp`
==================================

.. py:module:: avalanche.models.simple_mlp


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   avalanche.models.simple_mlp.SimpleMLP
   avalanche.models.simple_mlp.MTSimpleMLP



.. py:class:: SimpleMLP(num_classes=10, input_size=28 * 28, hidden_size=512, hidden_layers=1, drop_rate=0.5)

   Bases: :class:`torch.nn.Module`, :class:`avalanche.models.base_model.BaseModel`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super(Model, self).__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool

   Initializes internal Module state, shared by both nn.Module and ScriptModule.

   .. method:: forward(self, x)


   .. method:: get_features(self, x)

      Get features from model given input



.. py:class:: MTSimpleMLP(input_size=28 * 28, hidden_size=512)

   Bases: :class:`avalanche.models.dynamic_modules.MultiTaskModule`

   Multi-task modules are `torch.nn.Modules`s for multi-task
   scenarios. The `forward` method accepts task labels, one for
   each sample in the mini-batch.

   By default the `forward` method splits the mini-batch by task
   and calls `forward_single_task`. Subclasses must implement
   `forward_single_task` or override `forward.

   if `task_labels == None`, the output is computed in parallel
   for each task.

   Multi-task MLP with multi-head classifier.

   .. method:: forward(self, x, task_labels)

      compute the output given the input `x` and task labels.

      :param x:
      :param task_labels: task labels for each sample. if None, the
          computation will return all the possible outputs as a dictionary
          with task IDs as keys and the output of the corresponding task as
          output.
      :return:



